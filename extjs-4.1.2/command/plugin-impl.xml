<project basedir=".">
    <!--
    IMPORTANT: This file is private and should not be edited.
    -->
    <target name="init-antcontrib">
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <pathelement location="${sencha.command.dir}/lib/ant-contrib-1.0b3.jar"/>
                <pathelement
                        location="${sencha.command.dir}/lib/commons-httpclient-3.0.1.jar"/>
                <pathelement
                        location="${sencha.command.dir}/lib/commons-logging-1.0.4.jar"/>
                <pathelement location="${sencha.command.dir}/lib/commons-codec-1.3.jar"/>
            </classpath>
        </taskdef>
    </target>

    <target name="init-sencha-command">
        <taskdef resource="com/sencha/ant/antlib.xml"
                 classpath="${sencha.command.dir}/sencha.jar"/>
    </target>

    <target name="init-properties">

        <property file=".sencha.cfg"/>
        <property name="sdk.dir" location="${sencha.command.dir}"/>
        <property name="templates.dir" location="${basedir}/templates"/>

        <!--init the defualt app path here-->
        <property name="args.path" location="${basedir}/../../"/>

    </target>

    <target name="init" depends="init-properties,init-antcontrib,init-sencha-command"/>

    <!--
        Copies select files from the base sdk directory into the  new application
        directory structure
    -->
    <target name="copy-sdk">
        <property name="app.sdk.dir" location="${args.path}/sdk"/>
        <copy todir="${args.path}/sdk">
            <fileset dir="${basedir}/../" includes="**/*"/>
        </copy>
    </target>

    <!--
        Generates an application structure from templates
        CLI args available as:
        args.name => the application name
        args.path => the target path of the new application
    -->
    <target name="generate-app-impl">
        <x-generate dir="${templates.dir}/App" todir="${args.path}">
            <param name="name" value="${args.name}"/>
            <param name="appName" value="${args.name}"/>
            <param name="library" value="all"/>
            <!-- These are needed for the theme template-->
            <param name="themeName" value="${args.themeName}"/>
            <param name="controllerName" value="${args.controllerName}"/>
            <param name="viewName" value="${args.viewName}"/>
        </x-generate>
        <antcall target="update-app">
            <param name="item" value="${args.viewName}"/>
            <param name="section" value="views"/>
        </antcall>
        <antcall target="update-app">
            <param name="item" value="${args.controllerName}"/>
            <param name="section" value="controllers"/>
        </antcall>
        <antcall target="copy-sdk"/>
    </target>

    <target name="-before-generate-app"/>
    <target name="-after-generate-app"/>
    <target name="generate-app"
            depends="init,-before-generate-app,generate-app-impl,-after-generate-app"/>

    <!--
        Adds a new theme template application
        args.name => the theme name
        args.cssPath => the path to the css file
    -->
    <target name="generate-theme-impl">
        <x-generate dir="${templates.dir}/App/resources" todir="${args.path}/resources">
            <param name="name" value="${args.name}"/>
            <param name="themeName" value="${args.name}"/>
        </x-generate>
    </target>
    <target name="-before-generate-theme"/>
    <target name="-after-generate-theme"/>
    <target name="generate-theme"
            depends="init,-before-generate-theme,generate-theme-impl,-after-generate-theme"/>

    <!--
        Adds a controller class to the application
        CLI args available as:
        args.name => the application name
        args.path => the target path of the new application
    -->
    <target name="generate-controller-impl">
        <x-generate dir="${templates.dir}/App/app/controller" todir="${args.path}/app/controller">
            <load file="${args.path}/app.json"/>
            <param name="name" value="${args.name}"/>
            <param name="controllerName" value="${args.name}"/>
        </x-generate>
        <antcall target="update-app">
            <param name="item" value="${args.name}"/>
            <param name="section" value="controllers"/>
        </antcall>
    </target>

    <target name="-before-generate-controller"/>
    <target name="-after-generate-controller"/>
    <target name="generate-controller"
            depends="init,-before-generate-controller,generate-controller-impl,-after-generate-controller"/>


    <!--
        Adds a profile class to the application
        CLI args available as:
        args.name => the application name
        args.path => the target path of the new application
    -->
    <target name="generate-profile-impl">
        <fail>Generate Profile is a Touch SDK specific command.</fail>
    </target>

    <target name="-before-generate-profile"/>
    <target name="-after-generate-profile"/>
    <target name="generate-profile"
            depends="init,-before-generate-profile,generate-profile-impl,-after-generate-profile"/>


    <!--
        Adds a model class to the application
        CLI args available as:
        args.name => the model name
        args.path => the target path of the application
        args.fields => the field definitions to add
        -fields=name:val,other:otherval,...
    -->
    <target name="generate-model-impl">
        <property name="section" value="model"/>

        <x-generate dir="${templates.dir}/Model/${name}.js.vm" todir="${args.path}/app/model">
            <load file="${args.path}/app.json"/>
            <param name="name" value="${args.name}"/>
            <param name="fields" value="${args.fields}"/>
        </x-generate>
        <antcall target="update-app">
            <param name="item" value="${args.name}"/>
            <param name="section" value="models"/>
        </antcall>
    </target>

    <target name="-before-generate-model"/>
    <target name="-after-generate-model"/>
    <target name="generate-model"
            depends="init,-before-generate-model,generate-model-impl,-after-generate-model"/>

    <!--
        Adds a model class to the application
        CLI args available as:
        args.name => the model name
        args.path => the target path of the application
        args.fields => the field definitions to add
        -fields=name:val,other:otherval,...
    -->
    <target name="generate-view-impl">
        <property name="section" value="model"/>

        <x-generate dir="${templates.dir}/App/app/view" todir="${args.path}/app/view">
            <load file="${args.path}/app.json"/>
            <param name="name" value="${args.name}"/>
            <param name="viewName" value="${args.name}"/>
        </x-generate>
        <antcall target="update-app">
            <param name="item" value="${args.name}"/>
            <param name="section" value="views"/>
        </antcall>
    </target>

    <target name="-before-generate-view"/>
    <target name="-after-generate-view"/>
    <target name="generate-view"
            depends="init,-before-generate-view,generate-view-impl,-after-generate-view"/>

    <!--
        Adds mvc class references to the main app.js script
    -->
    <target name="update-app">
        <property name="app.js.file" value="${args.path}/app/app.js"/>
        <loadfile property="appData" srcfile="${app.js.file}"/>

        <condition property="newsection" else="false">
            <matches pattern="(?s)^.*${section}\s*\:.*$" string="${appData}"/>
        </condition>

        <condition property="emptysection" else="false">
            <matches
                    pattern="(?s).*${section}\s*\:\s*\[\s*\]"
                    string="${appData}"
                    multiline="true"/>
        </condition>

        <if>
            <equals arg1="${newsection}" arg2="false"/>
            <then>
                <replaceregexp
                        file="${app.js.file}"
                        match="(Ext.application\(\{(\n|\r\n))"
                        replace="\1    ${section}: [&quot;${item}&quot;],${line.separator}${line.separator}"/>
            </then>
            <elseif>
                <equals arg1="${emptysection}" arg2="true"/>
                <then>
                    <replaceregexp
                            file="${app.js.file}"
                            match="(${section}\s*\:\s*\[)"
                            replace="\1&quot;${item}&quot;"/>
                </then>
            </elseif>
            <else>
                <replaceregexp
                        file="${app.js.file}"
                        match="(${section}\s*\:\s*\[)"
                        replace="\1&quot;${item}&quot;,"/>
            </else>
        </if>

    </target>

    <target name="app-build-impl">
        <property name="build.dir" location="${args.destination}"/>

        <!-- clean the build directory -->
        <delete dir="${build.dir}"/>

        <!-- run sass compilation over the various themes -->
        <for param="sass">
            <dirset dir="${args.path}/resources/sass" includes="*"/>
            <sequential>
                <basename property="sass.name" file="@{sass}"/>
                <!--
                compile to both the workspace (for theme build)
                and build directory (for deployment)
                -->
                <condition property="use.shell" value="true">
                    <os family="unix"/>
                </condition>
                <exec executable="compass" failonerror="true" vmlauncher="${use.shell}">
                    <arg value="compile"/>
                    <arg value="--boring"/>
                    <arg value="@{sass}"/>
                    <arg value="--css-dir"/>
                    <arg value="${args.path}/resources/css/${sass.name}"/>
                    <arg value="--force"/>
                </exec>
                <copy todir="${build.dir}">
                    <fileset dir="${args.path}"
                             includes="resources/css/${sass.name}/**/*"/>
                </copy>
                <x-compress-css srcfile="${build.dir}/resources/css/${sass.name}/*.css"
                                outdir="${build.dir}/resources/css/${sass.name}"/>
            </sequential>
        </for>



        <!-- slice the themes for the various images -->
        <for param="theme">
            <dirset dir="${args.path}/resources/theme" includes="*"/>
            <sequential>
                <basename property="theme.name" file="@{theme}"/>
                <x-sencha-command>
                    theme
                    build
                    -page=@{theme}/theme.html
                    -out=${build.dir}/resources/images/${theme.name}
                </x-sencha-command>
            </sequential>
        </for>

        <!-- compile the page -->
        <x-sencha-command>
            compile
            --classpath=sdk/src,app
            page
            +yui
            -in=index.html
            -out=${build.dir}/index.html
        </x-sencha-command>

    </target>
    <target name="-before-app-build"/>
    <target name="-after-app-build"/>
    <target name="app-build" depends="init,-before-app-build,app-build-impl,-after-app-build"/>

</project>