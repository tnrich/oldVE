<?xml version="1.0" encoding="utf-8"?>
<!-- Author: Doug Densmore -->
<BaseShape xmlns="org.jbei.registry.view.ui.shapes.*"
           xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:degrafa="com.degrafa.*"
           width="20%" height="10%" 
           xmlns:degrafa1="http://www.degrafa.com/2007"
           creationComplete="onCreationComplete()"
           click="onClick()"
           >
    
    <degrafa:Surface width="100%" height="100%">
        <degrafa:GeometryGroup id="roundRectShapeGeoGroup">
            <degrafa1:RoundedRectangle id="roundedCollectionBackground"
                width="{width}"
                height="{height}"
                cornerRadius="{width/4}"
                
                stroke="{stroke}"
                fill="{background}"
                
                visible="false"
                />
            <degrafa1:RegularRectangle id="straightCollectionBackground" 
                width="{width}"
                height="{height}"
                
                stroke="{stroke}"
                fill="{background}"
                
                visible="false"
                />
        </degrafa:GeometryGroup>
    </degrafa:Surface>

	<degrafa1:VerticalLineRepeater id = "vertLineRepeater"/>						    							
		  
	<mx:Script>
		<![CDATA[
            import com.degrafa.geometry.VerticalLine;
            import com.degrafa.paint.SolidStroke;
            import com.roguedevelopment.objecthandles.SelectionManager;
            
            import mx.controls.Label;
            
            import org.jbei.registry.ApplicationFacade;
            import org.jbei.registry.Constants;
            import org.jbei.registry.models.j5.J5Bin;
            import org.jbei.registry.models.j5.J5Collection;
            import org.jbei.registry.view.ui.Colors;
					
			private var _collection:J5Collection;
            
            private var dsfLines:Array = new Array();  // use an Array so it can have empty elements where no DFS line is needed
			
            private var binBoundaries:Vector.<Number> = new Vector.<Number>;
            
            private var binLabels:Vector.<Label> = new Vector.<Label>;
            
            public function get numBins():uint
            {
                var num:uint;
                if (_collection != null && _collection.binsVector != null) {
                    num = _collection.binCount();
                } else {
                    num = 0;
                }
                return num;
            }
            
            public function initCollectionShape(p:Point, w:Number = NaN, h:Number = NaN):void
			{			
				x = p.x;
				y = p.y;
                
                if (!isNaN(h) && !isNaN(w)) {
                    height = h;
                    width = w;
                }

				var ss:SolidStroke= new SolidStroke();		
				ss.color = Colors.COLLECTION_BLUE;
				stroke = ss;
			}
									
			//Calculates binBoundaries and redraws the bins vertical repeater lines and DSF lines
			public function fixBinLines():void
			{
				vertLineRepeater.y1 = height;
				vertLineRepeater.count = numBins - 1;
				vertLineRepeater.x = width / numBins;
				vertLineRepeater.moveOffsetX = width / numBins;
                
                binBoundaries.splice(0, binBoundaries.length);
                //FIXME: does not always line up with vertLineRepeater (this is calculated in the same way as the dsf lines)
                for (var i:int = 0; i<numBins; i++) {
                    binBoundaries.push((i + 1) * width / numBins);
                }
                
                // FIXME: this should actually use updateDSFLines(), once it's implemented;
                removeDSFLines();
                createDSFLines();
			}
			
			//puts labels on the bins
			public function addLabels():void
			{
				//Label for the collection
				_textLabel.x = parent.x;
				_textLabel.y = parent.y - 25;
                
                //Labels for the bins
                for(var i:int = 0; i<binLabels.length; i++) {
                    removeChild(binLabels[i]);
                }
                binLabels.splice(0,binLabels.length);
                
				var index:int;
				for(index = 0; index < numBins; index++)
				{
					var bin:J5Bin = _collection.binsVector[index];
                    
                    var binLabel:Label = new Label();
                    binLabel.text = bin.binName;
                    binLabel.x = index * (width / numBins);
                    binLabel.y = height;
                    addChild(binLabel);
                    binLabels.push(binLabel);
				}
			}
			
			public function createBinLines():void
			{
				var ss:SolidStroke= new SolidStroke();
				ss.color = Colors.COMBIN_PURPLE;
				vertLineRepeater.stroke = ss;
				
				vertLineRepeater.x = width / numBins;
				vertLineRepeater.count = numBins - 1;
				vertLineRepeater.y = 0;
				vertLineRepeater.y1 = height;
				//FIXME - not sure if really taking effect
				vertLineRepeater.moveOffsetX = width / numBins;
								
				roundRectShapeGeoGroup.geometryCollection.addItem(vertLineRepeater);

                //FIXME: does not always line up with vertLineRepeater (this is calculated in the same way as the dsf lines)
                for (var i:int = 0; i<numBins; i++) {
                    binBoundaries.push((i + 1) * width / numBins);
                }
			}
			
			public function moveToBack():void
			{	
				if(parent != null)
					parent.addChildAt(this, 0);
			}
			
            public function toggleRoundedCorners(isCircular:Boolean):void
            {
                if (isCircular) {
                    roundedCollectionBackground.visible = true;
                    straightCollectionBackground.visible = false;
                } else {
                    roundedCollectionBackground.visible = false;
                    straightCollectionBackground.visible = true;
                }
            }
			
			//Getter and setter functions
			public function set collection(c:J5Collection):void
			{
				_collection = c;
			}
			
			public function get collection():J5Collection
			{
				return _collection;
			}
			
			public function destroy(parent:Object):void
			{
				delete(this);
			}
			
			public function setVertLineStroke(s:SolidStroke):void
			{
				vertLineRepeater.stroke = s
				
				//FIXME - strange; in order to get the stroke to be visable; one of the vertline parameters needs to change
				var tempX:int = vertLineRepeater.x;
				vertLineRepeater.x = 0;
				vertLineRepeater.x = tempX;
			}
			
            public function whichBin(point:Point):J5Bin  //pass in global coordinates
            {
                point = this.globalToContent(point);
                
                if (point.x >= 0 && point.x <= this.width && point.y >= 0 && point.y <= this.height) {
                    for (var i:int = 0; i <numBins; i++) {
                        if (point.x <= binBoundaries[i]) {
                            break;
                        }
                    }
                    return _collection.binsVector[i];
                } else {
                    return null;
                }
            }
            
            public function whichBinIndex(point:Point):int  //pass in global coordinates
            {
                point = this.globalToContent(point);
                
                if (point.x >= 0 && point.x <= this.width && point.y >= 0 && point.y <= this.height) {
                    for (var i:int = 0; i <numBins; i++) {
                        if (point.x <= binBoundaries[i]) {
                            break;
                        }
                    }
                    return i;
                } else {
                    return -1;
                }
            }
            
            public function getBinRightBoundary(index:int):Number
            {
                return binBoundaries[index];
            }
            
            public function getBinLeftBoundary(index:int):Number
            {
                if (index == 0) {
                    return 0;
                } else {
                    return binBoundaries[index - 1];
                }
            }
            
            public function calculateMinWidth():void  //absolute min width
            {
                minWidth = numBins * (2 * Constants.BIN_MARGIN + Constants.RECT_SHAPE_MIN_SIZE);
            }
            
            public function calculateMinHeight():void  //absolute min height
            {
                var maxPartsInBin:uint = 1;  // don't want the collection height to go to 0 even if there are no parts in the collection
                for (var i:int = 0; i < _collection.binCount(); i++) {
                    if (_collection.binsVector[i].binItemsVector.length > maxPartsInBin) {
                        maxPartsInBin = _collection.binsVector[i].binItemsVector.length;
                    }
                }
                
                minHeight = maxPartsInBin * (Constants.BIN_MARGIN + Constants.RECT_SHAPE_MIN_SIZE) + Constants.BIN_MARGIN;
            }
            
            // draw red line for direct synthesis firewall
            private function createDSFLines():void
            {
                for (var i:int = 0; i<numBins; i++) {
                    var bin:J5Bin = _collection.binsVector[i] as J5Bin;
                    if (bin.dsf) {
                        //FIXME: x coord doesn't always line up with the lines from vertLineRepeater
                        var vLine:VerticalLine = new VerticalLine((i + 1) * width / numBins, 0, height);
                        
                        var ss:SolidStroke= new SolidStroke();
                        ss.color = Colors.DSF_RED;
                        ss.weight = 2;
                        vLine.stroke = ss;
                        
                        roundRectShapeGeoGroup.geometryCollection.addItem(vLine);
                        
                        dsfLines[i] = vLine;
                    }
                }
                
            }
            
            private function removeDSFLines():void
            {
                if(!dsfLines || dsfLines.length == 0) {
                    return;
                }
                
                for(var i:int = 0; i < dsfLines.length; i++) {
                    if (dsfLines[i] != null) {
                        roundRectShapeGeoGroup.geometryCollection.removeItem(dsfLines[i]);
                    }
                }
                
                dsfLines.splice(0, dsfLines.length);
            }
            
            // update red lines for direct synthesis firewalls
            private function updateDSFLines():void
            {
                
            }
            
            private function onCreationComplete():void
            {
                if (_collection == null) {
                    toggleRoundedCorners(true); //collections are circular by default
                } else {
                    toggleRoundedCorners(collection.isCircular);
                }
                
                if (_collection != null) {
                    SelectionManager.instance.setSelected(this);
                }
            }
            
            private function onClick():void
            {
                this.setFocus();
            }
					
		]]>
	</mx:Script>
	
</BaseShape>

